{"ast":null,"code":"var _jsxFileName = \"/Users/hewhew/Downloads/create react app/eth-ipfs/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ipfsHash: '',\n      contractAddress: '',\n      accAddress: '',\n      buffer: '',\n      returnHash: '',\n      transactionHash: ''\n    };\n\n    this.getHash = async event => {\n      event.preventDefault(); //get hash from contract\n\n      const contractAddress = await storehash.options.address;\n      this.setState({\n        contractAddress\n      });\n      const ipfsHash = await storehash.methods.getHash().call();\n      this.setState({\n        ipfsHash\n      });\n\n      try {\n        await window.ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        const ethAccAddress = accounts[0];\n        this.setState({\n          accAddress\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      console.log(\"contract's info retrieved\");\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      let self = this;\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onload = async function (e) {\n        var rawLog = reader.result;\n        console.log(reader);\n        const buffer = await Buffer.from(rawLog);\n        self.setState({\n          buffer\n        });\n      };\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault(); //user's metamask account\n\n      await window.ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      const user = accounts[0];\n      console.log('Sending from Metamask account: ' + accounts[0]); //upload to ipfs\n\n      await ipfs.add(this.state.buffer, (err, result) => {\n        console.log(err, result);\n        this.setState({\n          returnHash: result[0].hash\n        }); //call contract methods\n\n        storehash.methods.saveHash(this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({\n            transactionHash\n          });\n        });\n      });\n      /*const results = await ipfs.add(this.state.buffer);\n      console.log(\"ipfs upload result: \"+results);\n      const hash = results[0].hash;\n      console.log(hash);\n      this.setState({returnHash:hash});*/\n      //storehash.methods.saveHash(this.state.ipfsHash).send({from: user});\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \" Set new hash \"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Upload to ipfs \")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.getHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \" Get Saved Hash \"), React.createElement(\"table\", {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.state.contractAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"From Account\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, this.state.accAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \" return hash \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.state.returnHash)))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hewhew/Downloads/create react app/eth-ipfs/src/App.js"],"names":["React","Component","web3","ipfs","storehash","App","state","ipfsHash","contractAddress","accAddress","buffer","returnHash","transactionHash","getHash","event","preventDefault","options","address","setState","methods","call","window","ethereum","enable","accounts","eth","getAccounts","ethAccAddress","error","console","log","captureFile","stopPropagation","self","file","target","files","reader","FileReader","readAsArrayBuffer","onload","e","rawLog","result","Buffer","from","onSubmit","user","add","err","hash","saveHash","send","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component{\n\n  state = {\n    ipfsHash:'',\n    contractAddress:'',\n    accAddress:'',\n    buffer:'',\n    returnHash:'',\n    transactionHash:''\n  };\n\n    //get contract's info\n    getHash = async(event) =>{\n      event.preventDefault();\n\n      //get hash from contract\n      const contractAddress = await storehash.options.address;\n      this.setState({contractAddress});\n      const ipfsHash = await storehash.methods.getHash().call();\n      this.setState({ipfsHash});\n\n        try{\n          await window.ethereum.enable();\n          const accounts = await web3.eth.getAccounts();\n          const ethAccAddress = accounts[0];\n          this.setState({accAddress});\n        } catch(error){\n          console.log(error);\n        }\n\n        console.log(\"contract's info retrieved\");\n\n      };//end of onClick\n\n      //uploading file\n      captureFile = (event) =>{\n        event.stopPropagation();\n        event.preventDefault();\n        let self = this;\n        const file = event.target.files[0];\n        let reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onload = async function(e) {\n          var rawLog = reader.result;\n          console.log(reader);\n          const buffer = await Buffer.from(rawLog);\n          self.setState({buffer});\n          };\n      };\n\n      //upload to ipfs\n      onSubmit = async (event) =>{\n        event.preventDefault();\n\n        //user's metamask account\n        await window.ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        const user = accounts[0];\n        console.log('Sending from Metamask account: ' + accounts[0]);\n\n\n        //upload to ipfs\n        await ipfs.add(this.state.buffer,(err,result) => {\n          console.log(err,result);\n          this.setState({returnHash:result[0].hash});\n\n          //call contract methods\n          storehash.methods.saveHash(this.state.ipfsHash).send(\n            {from:accounts[0]},(error,transactionHash) => {\n              console.log(transactionHash);\n              this.setState({transactionHash});\n            });\n          })\n\n          /*const results = await ipfs.add(this.state.buffer);\n          console.log(\"ipfs upload result: \"+results);\n          const hash = results[0].hash;\n          console.log(hash);\n          this.setState({returnHash:hash});*/\n          //storehash.methods.saveHash(this.state.ipfsHash).send({from: user});\n        };\n\n    render(){\n      return(\n        <div className=\"App\">\n            <h3> Set new hash </h3>\n            <form onSubmit={this.onSubmit}>\n            <input type=\"file\" onChange={this.captureFile}/>\n                <button type=\"submit\">\n                    Upload to ipfs </button>\n                    </form>\n                    <hr/>\n\n\n        <button onClick = {this.getHash}> Get Saved Hash </button>\n\n          <table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.contractAddress}</td>\n                  </tr>\n                  <tr>\n                    <td>From Account</td>\n                    <td>{this.state.accAddress}</td>\n                  </tr>\n                  <tr>\n                    <td> return hash </td>\n                    <td>{this.state.returnHash}</td>\n                  </tr>\n                </tbody>\n            </table>\n     </div>\n      );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}