{"ast":null,"code":"var _jsxFileName = \"/Users/hewhew/Downloads/create react app/eth-ipfs/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ipfsHash: '',\n      ethAddress: '',\n      storedHash: ''\n    };\n\n    this.onClick = async () => {\n      try {\n        this.setState({\n          blockNumber: \"waiting..\"\n        });\n        this.setState({\n          gasUsed: \"waiting..\"\n        });\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        });\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } //end of try {\n      catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault(); //user's metamask account\n\n      const accounts = await web3.eth.getAccounts();\n      console.log('Sending from Metamask account: ' + accounts[0]);\n      const ethAddress = await storehash.options.address;\n      this.setState({\n        ethAddress\n      }); //upload to ipfs\n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash);\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        }); //call contract methods\n\n        storehash.methods.saveHash(this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({\n            transactionHash\n          });\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"grid\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \" Set new hash \"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      bsStyle: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"SetHash \")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \" = \", this.onClick, \"> Get Saved Hash \"), React.createElement(\"table\", {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.ethAddress))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hewhew/Downloads/create react app/eth-ipfs/src/App.js"],"names":["React","Component","web3","ipfs","storehash","App","state","ipfsHash","ethAddress","storedHash","onClick","setState","blockNumber","gasUsed","eth","getTransactionReceipt","transactionHash","err","txReceipt","console","log","error","onSubmit","event","preventDefault","accounts","getAccounts","options","address","add","buffer","hash","methods","saveHash","send","from","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA2B;AAAA;AAAA;AAAA,SAEzBK,KAFyB,GAEjB;AACNC,MAAAA,QAAQ,EAAC,EADH;AAENC,MAAAA,UAAU,EAAC,EAFL;AAGNC,MAAAA,UAAU,EAAC;AAHL,KAFiB;;AAAA,SAQvBC,OARuB,GAQb,YAAU;AAClB,UAAG;AACD,aAAKC,QAAL,CAAc;AAACC,UAAAA,WAAW,EAAC;AAAb,SAAd;AACA,aAAKD,QAAL,CAAc;AAACE,UAAAA,OAAO,EAAC;AAAT,SAAd;AACA,cAAMX,IAAI,CAACY,GAAL,CAASC,qBAAT,CAA+B,KAAKT,KAAL,CAAWU,eAA1C,EACJ,CAACC,GAAD,EAAKC,SAAL,KAAmB;AACjBC,UAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAgBC,SAAhB;AACA,eAAKP,QAAL,CAAc;AAACO,YAAAA;AAAD,WAAd;AACD,SAJG,CAAN;AAME,cAAM,KAAKP,QAAL,CAAc;AAACC,UAAAA,WAAW,EAAC,KAAKN,KAAL,CAAWY,SAAX,CAAqBN;AAAlC,SAAd,CAAN;AAEA,cAAM,KAAKD,QAAL,CAAc;AAACE,UAAAA,OAAO,EAAC,KAAKP,KAAL,CAAWY,SAAX,CAAqBL;AAA9B,SAAd,CAAN;AACD,OAZH,CAYG;AACD,aAAMQ,KAAN,EAAY;AACVF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,KAzBoB;;AAAA,SA2BrBC,QA3BqB,GA2BV,MAAOC,KAAP,IAAgB;AACzBA,MAAAA,KAAK,CAACC,cAAN,GADyB,CAGzB;;AACA,YAAMC,QAAQ,GAAG,MAAMvB,IAAI,CAACY,GAAL,CAASY,WAAT,EAAvB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCK,QAAQ,CAAC,CAAD,CAAxD;AAEA,YAAMjB,UAAU,GAAG,MAAMJ,SAAS,CAACuB,OAAV,CAAkBC,OAA3C;AACA,WAAKjB,QAAL,CAAc;AAACH,QAAAA;AAAD,OAAd,EARyB,CAUzB;;AACA,YAAML,IAAI,CAAC0B,GAAL,CAAS,KAAKvB,KAAL,CAAWwB,MAApB,EAA2B,CAACb,GAAD,EAAKV,QAAL,KAAkB;AACjDY,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAgBV,QAAhB;AACA,aAAKI,QAAL,CAAc;AAACJ,UAAAA,QAAQ,EAACA,QAAQ,CAAC,CAAD,CAAR,CAAYwB;AAAtB,SAAd,EAFiD,CAIjD;;AACA3B,QAAAA,SAAS,CAAC4B,OAAV,CAAkBC,QAAlB,CAA2B,KAAK3B,KAAL,CAAWC,QAAtC,EAAgD2B,IAAhD,CACE;AAACC,UAAAA,IAAI,EAACV,QAAQ,CAAC,CAAD;AAAd,SADF,EACqB,CAACJ,KAAD,EAAOL,eAAP,KAA2B;AAC5CG,UAAAA,OAAO,CAACC,GAAR,CAAYJ,eAAZ;AACA,eAAKL,QAAL,CAAc;AAACK,YAAAA;AAAD,WAAd;AACD,SAJH;AAKC,OAVG,CAAN;AAWC,KAjDkB;AAAA;;AAmDvBoB,EAAAA,MAAM,GAAE;AACN,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAM,MAAA,QAAQ,EAAE,KAAKd,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEI;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CAFF,EAOU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPV,EAQU;AAAQ,MAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAoB,KAAKZ,OAAzB,sBARV,EAUA;AAAO,MAAA,QAAQ,MAAf;AAAgB,MAAA,UAAU,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF,CADN,EAQM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKJ,KAAL,CAAWC,QAAhB,CAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKD,KAAL,CAAWE,UAAhB,CAFF,CALF,CARN,CAVA,CADF,CADF;AAkCD;;AAtFsB;;AAyF3B,eAAeH,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component{\n\n  state = {\n    ipfsHash:'',\n    ethAddress:'',\n    storedHash:''\n  };\n\n    onClick = async() =>{\n      try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting..\"});\n        await web3.eth.getTransactionReceipt(this.state.transactionHash,\n          (err,txReceipt) => {\n            console.log(err,txReceipt);\n            this.setState({txReceipt});\n          });\n\n          await this.setState({blockNumber:this.state.txReceipt.blockNumber});\n\n          await this.setState({gasUsed:this.state.txReceipt.gasUsed});\n        }//end of try {\n        catch(error){\n          console.log(error);\n        }\n      }//end of onClick\n\n      onSubmit = async (event) =>{\n        event.preventDefault();\n\n        //user's metamask account\n        const accounts = await web3.eth.getAccounts();\n        console.log('Sending from Metamask account: ' + accounts[0]);\n\n        const ethAddress = await storehash.options.address;\n        this.setState({ethAddress});\n\n        //upload to ipfs\n        await ipfs.add(this.state.buffer,(err,ipfsHash) => {\n          console.log(err,ipfsHash);\n          this.setState({ipfsHash:ipfsHash[0].hash});\n\n          //call contract methods\n          storehash.methods.saveHash(this.state.ipfsHash).send(\n            {from:accounts[0]},(error,transactionHash) => {\n              console.log(transactionHash);\n              this.setState({transactionHash});\n            });\n          })\n        };\n\n    render(){\n      return(\n        <div className=\"App\">\n          <grid>\n            <h3> Set new hash </h3>\n            <form onSubmit={this.onSubmit}>\n              <input type=\"text\"/>\n                <button bsStyle=\"primary\" type=\"submit\">\n                    SetHash </button>\n                    </form>\n                    <hr/>\n                    <button onClick> = {this.onClick}> Get Saved Hash </button>\n\n          <table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n                </tbody>\n            </table>\n        </grid>\n     </div>\n      );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}