{"ast":null,"code":"var _jsxFileName = \"/Users/hewhew/Downloads/create react app/eth-ipfs/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ipfsHash: '',\n      ethAddress: '',\n      ethAccAddress: '',\n      buffer: '',\n      returnHash: ''\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      let self = this;\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onload = async function (e) {\n        var rawLog = reader.result;\n        console.log(rawLog);\n        console.log(reader);\n        const buffer = await Buffer.from(rawLog); //console.log(buffer)\n        //console.log(buffer.length)\n\n        self.setState({\n          buffer\n        });\n      }; //reader.onloadrend = () => this.convertToBuffer(reader)\n      //reader.onload = () => this.convertToBuffer(reader)\n      //this.setState({buffer:reader})\n      //this.setState({buffer:reader})\n      //console.log(\"here's the buffer\")\n      //console.log((this.state.buffer).length)\n      //console.log(reader)\n      //console.log(file)\n\n    };\n\n    this.convertToBuffer = async reader => {\n      const buffer = await Buffer.from(reader.result); //const buffer = await Buffer.from(\"ABC\");\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.getHash = async event => {\n      event.preventDefault();\n      /*try{\n         await web3.eth.getTransactionReceipt(this.state.transactionHash,\n          (err,txReceipt) => {\n            console.log(err,txReceipt);\n            this.setState({txReceipt});\n          });\n         }//end of try {\n        catch(error){\n          console.log(error);\n        }*/\n\n      const ethAddress = await storehash.options.address;\n      this.setState({\n        ethAddress\n      });\n      await window.ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      const ethAccAddress = accounts[0]; //const ethAccAddress = await web3.eth.accounts[0];\n\n      this.setState({\n        ethAccAddress\n      }); //get hash from contract\n\n      /*await storehash.methods.getHash().call((error,ipfsHash) =>\n      {\n        console.log(error, ipfsHash);\n        this.setState({ipfsHash});\n      });*/\n\n      const ipfsHash = await storehash.methods.getHash().call();\n      this.setState({\n        ipfsHash\n      });\n      console.log(\"wtffffff\");\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault(); //user's metamask account\n\n      await window.ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      const user = accounts[0]; //const user = await web3.eth.accounts[0];\n      //console.log('Sending from Metamask account: ' + accounts[0]);\n      //const ethAddress = await storehash.options.address;\n      //this.setState({ethAddress});\n      //upload to ipfs\n\n      /*await ipfs.add(this.state.buffer,(err,ipfsHash) => {\n        console.log(err,ipfsHash);\n        this.setState({ipfsHash:ipfsHash[0].hash});\n         //call contract methods\n        storehash.methods.saveHash(this.state.ipfsHash).send(\n          {from:accounts[0]},(error,transactionHash) => {\n            console.log(transactionHash);\n            this.setState({transactionHash});\n          });\n        })*/\n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash);\n        this.setState({\n          returnHash: ipfsHash[0].hash\n        });\n      }); //storehash.methods.saveHash(this.state.ipfsHash).send({from: user});\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"grid\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \" Set new hash \"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      bsStyle: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Upload to ipfs \")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.getHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \" Get Saved Hash \"), React.createElement(\"table\", {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.state.ethAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"From Account\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, this.state.ethAccAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \" return hash \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.state.returnHash))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hewhew/Downloads/create react app/eth-ipfs/src/App.js"],"names":["React","Component","web3","ipfs","storehash","App","state","ipfsHash","ethAddress","ethAccAddress","buffer","returnHash","captureFile","event","stopPropagation","preventDefault","self","file","target","files","reader","window","FileReader","readAsArrayBuffer","onload","e","rawLog","result","console","log","Buffer","from","setState","convertToBuffer","getHash","options","address","ethereum","enable","accounts","eth","getAccounts","methods","call","onSubmit","user","add","err","hash","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component{\n\n  state = {\n    ipfsHash:'',\n    ethAddress:'',\n    ethAccAddress:'',\n    buffer:'',\n    returnHash:''\n  };\n\n  captureFile = (event) =>{\n    event.stopPropagation()\n    event.preventDefault()\n    let self = this\n    const file = event.target.files[0]\n    let reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onload = async function(e) {\n    var rawLog = reader.result;\n    console.log(rawLog);\n    console.log(reader)\n    const buffer = await Buffer.from(rawLog)\n    //console.log(buffer)\n    //console.log(buffer.length)\n    self.setState({buffer})\n    };\n    //reader.onloadrend = () => this.convertToBuffer(reader)\n    //reader.onload = () => this.convertToBuffer(reader)\n    //this.setState({buffer:reader})\n    //this.setState({buffer:reader})\n    //console.log(\"here's the buffer\")\n    //console.log((this.state.buffer).length)\n    //console.log(reader)\n    //console.log(file)\n  };\n\n    convertToBuffer = async(reader) => {\n      const buffer = await Buffer.from(reader.result);\n      //const buffer = await Buffer.from(\"ABC\");\n      this.setState({buffer});\n    }\n\n    getHash = async(event) =>{\n      event.preventDefault();\n      /*try{\n\n        await web3.eth.getTransactionReceipt(this.state.transactionHash,\n          (err,txReceipt) => {\n            console.log(err,txReceipt);\n            this.setState({txReceipt});\n          });\n\n        }//end of try {\n        catch(error){\n          console.log(error);\n        }*/\n        const ethAddress = await storehash.options.address;\n        this.setState({ethAddress});\n\n        await window.ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        const ethAccAddress = accounts[0];\n        //const ethAccAddress = await web3.eth.accounts[0];\n        this.setState({ethAccAddress});\n\n        //get hash from contract\n\n\n        /*await storehash.methods.getHash().call((error,ipfsHash) =>\n        {\n          console.log(error, ipfsHash);\n          this.setState({ipfsHash});\n        });*/\n\n\n      const ipfsHash = await storehash.methods.getHash().call();\n      this.setState({ipfsHash});\n\n      console.log(\"wtffffff\");\n\n      };//end of onClick\n\n      onSubmit = async (event) =>{\n        event.preventDefault();\n\n        //user's metamask account\n        await window.ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        const user = accounts[0];\n        //const user = await web3.eth.accounts[0];\n        //console.log('Sending from Metamask account: ' + accounts[0]);\n\n        //const ethAddress = await storehash.options.address;\n        //this.setState({ethAddress});\n\n        //upload to ipfs\n        /*await ipfs.add(this.state.buffer,(err,ipfsHash) => {\n          console.log(err,ipfsHash);\n          this.setState({ipfsHash:ipfsHash[0].hash});\n\n          //call contract methods\n          storehash.methods.saveHash(this.state.ipfsHash).send(\n            {from:accounts[0]},(error,transactionHash) => {\n              console.log(transactionHash);\n              this.setState({transactionHash});\n            });\n          })*/\n          await ipfs.add(this.state.buffer,(err,ipfsHash) => {\n            console.log(err,ipfsHash);\n            this.setState({returnHash:ipfsHash[0].hash});})\n\n          //storehash.methods.saveHash(this.state.ipfsHash).send({from: user});\n        };\n\n    render(){\n      return(\n        <div className=\"App\">\n          <grid>\n            <h3> Set new hash </h3>\n            <form onSubmit={this.onSubmit}>\n            <input type=\"file\" onChange={this.captureFile}/>\n                <button bsStyle=\"primary\" type=\"submit\">\n                    Upload to ipfs </button>\n                    </form>\n                    <hr/>\n\n\n        <button onClick = {this.getHash}> Get Saved Hash </button>\n\n          <table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n                  <tr>\n                    <td>From Account</td>\n                    <td>{this.state.ethAccAddress}</td>\n                  </tr>\n                  <tr>\n                    <td> return hash </td>\n                    <td>{this.state.returnHash}</td>\n                  </tr>\n                </tbody>\n            </table>\n        </grid>\n     </div>\n      );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}