{"ast":null,"code":"var _jsxFileName = \"/Users/hewhew/Downloads/create react app/eth-ipfs/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ethAddress: '',\n      storedHash: ''\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadrend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      const buffer = await Buffer.from(reader.result);\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onClick = async () => {\n      try {\n        this.setState({\n          blockNumber: \"waiting..\"\n        });\n        this.setState({\n          gasUsed: \"waiting..\"\n        });\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        });\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } //end of try {\n      catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault(); //user's metamask account\n\n      const accounts = await web3.eth.getAccounts();\n      console.log('Sending from Metamask account: ' + accounts[0]);\n      const ethAddress = await storehash.options.address;\n      this.setState({\n        ethAddress\n      }); //upload to ipfs\n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash);\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        }); //call contract methods\n\n        storehash.methods.saveHash(this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({\n            transactionHash\n          });\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \" Ethereum and IPFS with Create React App\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"grid\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \" Choose file to send to IPFS \"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      bsStyle: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Send it \")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \" = \", this.onClick, \"> Get Transaction Receipt \"), React.createElement(\"table\", {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.ethAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Tx Hash # \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.transactionHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Block Number # \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.state.blockNumber)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Gas Used\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.gasUsed))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hewhew/Downloads/create react app/eth-ipfs/src/App.js"],"names":["React","Component","web3","ipfs","storehash","App","state","ethAddress","storedHash","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadrend","convertToBuffer","buffer","Buffer","from","result","setState","onClick","blockNumber","gasUsed","eth","getTransactionReceipt","transactionHash","err","txReceipt","console","log","error","onSubmit","accounts","getAccounts","options","address","add","ipfsHash","hash","methods","saveHash","send","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component{\n\n  state = {\n    ethAddress:'',\n    storedHash:''\n  };\n\n  captureFile = (event) =>{\n    event.stopPropagation()\n    event.preventDefault()\n    const file = event.target.files[0]\n    let reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadrend = () => this.convertToBuffer(reader)\n  };\n\n    convertToBuffer = async(reader) => {\n      const buffer = await Buffer.from(reader.result);\n      this.setState({buffer});\n    }\n\n    onClick = async() =>{\n      try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting..\"});\n        await web3.eth.getTransactionReceipt(this.state.transactionHash,\n          (err,txReceipt) => {\n            console.log(err,txReceipt);\n            this.setState({txReceipt});\n          });\n\n          await this.setState({blockNumber:this.state.txReceipt.blockNumber});\n\n          await this.setState({gasUsed:this.state.txReceipt.gasUsed});\n        }//end of try {\n        catch(error){\n          console.log(error);\n        }\n      }//end of onClick\n\n      onSubmit = async (event) =>{\n        event.preventDefault();\n\n        //user's metamask account\n        const accounts = await web3.eth.getAccounts();\n        console.log('Sending from Metamask account: ' + accounts[0]);\n\n        const ethAddress = await storehash.options.address;\n        this.setState({ethAddress});\n\n        //upload to ipfs\n        await ipfs.add(this.state.buffer,(err,ipfsHash) => {\n          console.log(err,ipfsHash);\n          this.setState({ipfsHash:ipfsHash[0].hash});\n\n          //call contract methods\n          storehash.methods.saveHash(this.state.ipfsHash).send(\n            {from:accounts[0]},(error,transactionHash) => {\n              console.log(transactionHash);\n              this.setState({transactionHash});\n            });\n          })\n        };\n\n    render(){\n      return(\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1> Ethereum and IPFS with Create React App</h1>\n          </header>\n          <hr/>\n          <grid>\n            <h3> Choose file to send to IPFS </h3>\n            <form onSubmit={this.onSubmit}>\n              <input type=\"file\"\n                onChange={this.captureFile}/>\n                <button bsStyle=\"primary\" type=\"submit\">\n                    Send it </button>\n                    </form>\n                    <hr/>\n                    <button onClick> = {this.onClick}> Get Transaction Receipt </button>\n\n          <table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n                  <tr>\n                    <td>Tx Hash # </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Block Number # </td>\n                    <td>{this.state.blockNumber}</td>\n                  </tr>\n                  <tr>\n                    <td>Gas Used</td>\n                    <td>{this.state.gasUsed}</td>\n                  </tr>\n                </tbody>\n            </table>\n        </grid>\n     </div>\n      );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}